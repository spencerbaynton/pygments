/* Name.Builtin.Pseudo */
/* Builtin names that are implicit (e.g. self in Ruby, this in Java). */
.highlight .bp {

}

/* Comment */
/* Token type for any comment. */
.highlight .c {

}

/* Comment.Single */
/* Token type for comments that end at the end of a line (e.g. # foo). */
.highlight .c1 {

}

/* Comment.Multiline */
/* Token type for multiline comments. */
.highlight .cm {

}

/* Comment.Preproc */
/* Token type for preprocessor comments (also <?php/<% constructs). */
.highlight .cp {

}

/* Comment.Special */
/* Special data in comments. For example code tags, author and license information, etc. */
.highlight .cs {

}

/* Error */
/* represents lexer errors */
.highlight .err {

}

/* Generic */
/* A generic, unstyled token. Normally you don't use this token type. */
.highlight .g {

}

/* Generic.Deleted */
/* Marks the token value as deleted. */
.highlight .gd {

}

/* Generic.Emph */
/* Marks the token value as emphasized. */
.highlight .ge {

}

/* Generic.Heading */
/* Marks the token value as headline. */
.highlight .gh {

}

/* Generic.Inserted */
/* Marks the token value as inserted. */
.highlight .gi {

}

/* Generic.Output */
/* Marks the token value as program output (e.g. for python cli lexer). */
.highlight .go {

}

/* Generic.Prompt */
/* Marks the token value as command prompt (e.g. bash lexer). */
.highlight .gp {

}

/* Generic.Error */
/* Marks the token value as an error message. */
.highlight .gr {

}

/* Generic.Strong */
/* Marks the token value as bold (e.g. for rst lexer). */
.highlight .gs {

}

/* Generic.Traceback */
/* Marks the token value as a part of an error traceback. */
.highlight .gt {

}

/* Generic.Subheading */
/* Marks the token value as subheadline. */
.highlight .gu {

}

/* Number.Integer.Long */
/* Token type for long integer literals (e.g. 42L in Python). */
.highlight .il {

}

/* Keyword */
/* For any kind of keyword (especially if it doesn't match any of the subtypes of course). */
.highlight .k {

}

/* Keyword.Constant */
/* For keywords that are constants (e.g. None in future Python versions). */
.highlight .kc {

}

/* Keyword.Declaration */
/* For keywords used for variable declaration (e.g. var in some programming languages like JavaScript). */
.highlight .kd {

}

/* Keyword.Namespace */
/* For keywords used for namespace declarations (e.g. import in Python and Java and package in Java). */
.highlight .kn {

}

/* Keyword.Pseudo */
/* For keywords that aren't really keywords (e.g. None in old Python versions). */
.highlight .kp {

}

/* Keyword.Reserved */
/* For reserved keywords. */
.highlight .kr {

}

/* Keyword.Type */
/* For builtin types that can't be used as identifiers (e.g. int, char etc. in C). */
.highlight .kt {

}

/* Literal */
/* For any literal (if not further defined). */
.highlight .l {

}

/* Literal.Date */
/* for date literals (e.g. 42d in Boo). */
.highlight .ld {

}

/* Number */
/* Token type for any number literal. */
.highlight .m {

}

/* Number.Float */
/* Token type for float literals (e.g. 42.0). */
.highlight .mf {

}

/* Number.Hex */
/* Token type for hexadecimal number literals (e.g. 0xdeadbeef). */
.highlight .mh {

}

/* Number.Integer */
/* Token type for integer literals (e.g. 42). */
.highlight .mi {

}

/* Number.Oct */
/* Token type for octal literals. */
.highlight .mo {

}

/* Name */
/* For any name (variable names, function names, classes). */
.highlight .n {

}

/* Name.Attribute */
/* For all attributes (e.g. in HTML tags). */
.highlight .na {

}

/* Name.Builtin */
/* Builtin names; names that are available in the global namespace. */
.highlight .nb {

}

/* Name.Class */
/* Class names. Because no lexer can know if a name is a class or a function or something else this token is meant for class declarations. */
.highlight .nc {

}

/* Name.Decorator */
/* Token type for decorators. Decorators are synatic elements in the Python language. Similar syntax elements exist in C# and Java. */
.highlight .nd {

}

/* Name.Exception */
/* Token type for exception names (e.g. RuntimeError in Python). Some languages define exceptions in the function signature (Java). You can highlight the name of that exception using this token then. */
.highlight .ne {

}

/* Name.Function */
/* Token type for function names. */
.highlight .nf {

}

/* Name.Entity */
/* Token type for special entities. (e.g. &nbsp; in HTML). */
.highlight .ni {

}

/* Name.Label */
/* Token type for label names (e.g. in languages that support goto). */
.highlight .nl {

}

/* Name.Namespace */
/* Token type for namespaces. (e.g. import paths in Java/Python), names following the module/namespace keyword in other languages. */
.highlight .nn {

}

/* Name.Constant */
/* Token type for constants. In some languages you can recognise a token by the way it's defined (the value after a const keyword for example). In other languages constants are uppercase by definition (Ruby). */
.highlight .no {

}

/* Name.Tag */
/* Tag names (in HTML/XML markup or configuration files). */
.highlight .nt {

}

/* Name.Variable */
/* Token type for variables. Some languages have prefixes for variable names (PHP, Ruby, Perl). You can highlight them using this token. */
.highlight .nv {

}

/* Name.Other */
/* Other names. Normally unused. */
.highlight .nx {

}

/* Operator */
/* For any punctuation operator (e.g. +, -). */
.highlight .o {

}

/* Operator.Word */
/* For any operator that is a word (e.g. not). */
.highlight .ow {

}

/* Punctuation */
/* For any punctuation which is not an operator (e.g. [, (...) */
.highlight .p {

}

/* String */
/* For any string literal. */
.highlight .s {

}

/* String.Single */
/* Token type for single quoted strings. */
.highlight .s1 {

}

/* String.Double */
/* Double quoted strings. */
.highlight .s2 {

}

/* String.Backtick */
/* Token type for strings enclosed in backticks. */
.highlight .sb {

}

/* String.Char */
/* Token type for single characters (e.g. Java, C). */
.highlight .sc {

}

/* String.Doc */
/* Token type for documentation strings (for example Python). */
.highlight .sd {

}

/* String.Escape */
/* Token type for escape sequences in strings. */
.highlight .se {

}

/* String.Heredoc */
/* Token type for "heredoc" strings (e.g. in Ruby or Perl). */
.highlight .sh {

}

/* String.Interpol */
/* Token type for interpolated parts in strings (e.g. #{foo} in Ruby). */
.highlight .si {

}

/* String.Regex */
/* Token type for regular expression literals (e.g. /foo/ in JavaScript). */
.highlight .sr {

}

/* String.Symbol */
/* Token type for symbols (e.g. :foo in LISP or Ruby). */
.highlight .ss {

}

/* String.Other */
/* Token type for any other strings (for example %q{foo} string constructs in Ruby). */
.highlight .sx {

}

/* Name.Variable.Class */
/* same as Name.Variable but for class variables (also static variables). */
.highlight .vc {

}

/* Name.Variable.Global */
/* same as Name.Variable but for global variables (used in Ruby, for example). */
.highlight .vg {

}

/* Name.Variable.Instance */
/* same as Name.Variable but for instance variables. */
.highlight .vi {

}

/* Text.Whitespace */
/* for specially highlighted whitespace */
.highlight .w {

}

/* Other */
/* special token for data not matched by a parser (e.g. HTML markup in PHP code) */
.highlight .x {

}