.highlight

	// Name.Builtin.Pseudo
	// Builtin names that are implicit (e.g. self in Ruby, this in Java).
	.bp
	
	// Comment
	// Token type for any comment.
	.c
	
	// Comment.Single
	// Token type for comments that end at the end of a line (e.g. # foo).
	.c1
	
	// Comment.Multiline
	// Token type for multiline comments.
	.cm
	
	// Comment.Preproc
	// Token type for preprocessor comments (also <?php/<% constructs).
	.cp
	
	// Comment.Special
	// Special data in comments. For example code tags, author and license information, etc.
	.cs
	
	// Error
	// represents lexer errors
	.err
	
	// Generic
	// A generic, unstyled token. Normally you don't use this token type.
	.g
	
	// Generic.Deleted
	// Marks the token value as deleted.
	.gd
	
	// Generic.Emph
	// Marks the token value as emphasized.
	.ge
	
	// Generic.Heading
	// Marks the token value as headline.
	.gh
	
	// Generic.Inserted
	// Marks the token value as inserted.
	.gi
	
	// Generic.Output
	// Marks the token value as program output (e.g. for python cli lexer).
	.go
	
	// Generic.Prompt
	// Marks the token value as command prompt (e.g. bash lexer).
	.gp
	
	// Generic.Error
	// Marks the token value as an error message.
	.gr
	
	// Generic.Strong
	// Marks the token value as bold (e.g. for rst lexer).
	.gs
	
	// Generic.Traceback
	// Marks the token value as a part of an error traceback.
	.gt
	
	// Generic.Subheading
	// Marks the token value as subheadline.
	.gu
	
	// Number.Integer.Long
	// Token type for long integer literals (e.g. 42L in Python).
	.il
	
	// Keyword
	// For any kind of keyword (especially if it doesn't match any of the subtypes of course).
	.k
	
	// Keyword.Constant
	// For keywords that are constants (e.g. None in future Python versions).
	.kc
	
	// Keyword.Declaration
	// For keywords used for variable declaration (e.g. var in some programming languages like JavaScript).
	.kd
	
	// Keyword.Namespace
	// For keywords used for namespace declarations (e.g. import in Python and Java and package in Java).
	.kn
	
	// Keyword.Pseudo
	// For keywords that aren't really keywords (e.g. None in old Python versions).
	.kp
	
	// Keyword.Reserved
	// For reserved keywords.
	.kr
	
	// Keyword.Type
	// For builtin types that can't be used as identifiers (e.g. int, char etc. in C).
	.kt
	
	// Literal
	// For any literal (if not further defined).
	.l
	
	// Literal.Date
	// for date literals (e.g. 42d in Boo).
	.ld
	
	// Number
	// Token type for any number literal.
	.m
	
	// Number.Float
	// Token type for float literals (e.g. 42.0).
	.mf
	
	// Number.Hex
	// Token type for hexadecimal number literals (e.g. 0xdeadbeef).
	.mh
	
	// Number.Integer
	// Token type for integer literals (e.g. 42).
	.mi
	
	// Number.Oct
	// Token type for octal literals.
	.mo
	
	// Name
	// For any name (variable names, function names, classes).
	.n
	
	// Name.Attribute
	// For all attributes (e.g. in HTML tags).
	.na
	
	// Name.Builtin
	// Builtin names; names that are available in the global namespace.
	.nb
	
	// Name.Class
	// Class names. Because no lexer can know if a name is a class or a function or something else this token is meant for class declarations.
	.nc
	
	// Name.Decorator
	// Token type for decorators. Decorators are synatic elements in the Python language. Similar syntax elements exist in C# and Java.
	.nd
	
	// Name.Exception
	// Token type for exception names (e.g. RuntimeError in Python). Some languages define exceptions in the function signature (Java). You can highlight the name of that exception using this token then.
	.ne
	
	// Name.Function
	// Token type for function names.
	.nf
	
	// Name.Entity
	// Token type for special entities. (e.g. &nbsp; in HTML).
	.ni
	
	// Name.Label
	// Token type for label names (e.g. in languages that support goto).
	.nl
	
	// Name.Namespace
	// Token type for namespaces. (e.g. import paths in Java/Python), names following the module/namespace keyword in other languages.
	.nn
	
	// Name.Constant
	// Token type for constants. In some languages you can recognise a token by the way it's defined (the value after a const keyword for example). In other languages constants are uppercase by definition (Ruby).
	.no
	
	// Name.Tag
	// Tag names (in HTML/XML markup or configuration files).
	.nt
	
	// Name.Variable
	// Token type for variables. Some languages have prefixes for variable names (PHP, Ruby, Perl). You can highlight them using this token.
	.nv
	
	// Name.Other
	// Other names. Normally unused.
	.nx
	
	// Operator
	// For any punctuation operator (e.g. +, -).
	.o
	
	// Operator.Word
	// For any operator that is a word (e.g. not).
	.ow
	
	// Punctuation
	// For any punctuation which is not an operator (e.g. [, (...)
	.p
	
	// String
	// For any string literal.
	.s
	
	// String.Single
	// Token type for single quoted strings.
	.s1
	
	// String.Double
	// Double quoted strings.
	.s2
	
	// String.Backtick
	// Token type for strings enclosed in backticks.
	.sb
	
	// String.Char
	// Token type for single characters (e.g. Java, C).
	.sc
	
	// String.Doc
	// Token type for documentation strings (for example Python).
	.sd
	
	// String.Escape
	// Token type for escape sequences in strings.
	.se
	
	// String.Heredoc
	// Token type for "heredoc" strings (e.g. in Ruby or Perl).
	.sh
	
	// String.Interpol
	// Token type for interpolated parts in strings (e.g. #{foo} in Ruby).
	.si
	
	// String.Regex
	// Token type for regular expression literals (e.g. /foo/ in JavaScript).
	.sr
	
	// String.Symbol
	// Token type for symbols (e.g. :foo in LISP or Ruby).
	.ss
	
	// String.Other
	// Token type for any other strings (for example %q{foo} string constructs in Ruby).
	.sx
	
	// Name.Variable.Class
	// same as Name.Variable but for class variables (also static variables).
	.vc
	
	// Name.Variable.Global
	// same as Name.Variable but for global variables (used in Ruby, for example).
	.vg
	
	// Name.Variable.Instance
	// same as Name.Variable but for instance variables.
	.vi
	
	// Text.Whitespace
	// for specially highlighted whitespace
	.w
	
	// Other
	// special token for data not matched by a parser (e.g. HTML markup in PHP code)
	.x
